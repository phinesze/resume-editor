export const supplement = {
  id: '4',
  title: '一問一答',
  text: ` 
### 〈自身について〉

#### 【フリーランスを選んだ理由】

数々の現場を経験することで多様な経験ができるのではないかと思い、また場所や時間を問わずに比較的自由にして働くことができるのではと思い志しました。
将来的には、勤務時間を少なくして、趣味でのプロジェクトや Web サービスの構築や OSS ソフトウェアへの参画など業務にとらわれない活動をするといった、可能性を広げるといった面でもフリーランスを選びました。

#### 【フロントエンドを主に携わっていた理由】

自身で触ってみたときにデザインなどを比較的自由にできることを魅力的に思いました。

#### 【フロントエンドを設計する際のコツは】

まずページコンポーネントから画面設計図の構造に近づけるように HTML コーディングをして、必要そうだと思った時に細かい順にコンポーネント化を行うような手順で行うことが多いです。

#### 【コーディングをする際に気を配っている事】

DRY 原則や関心の分離(SoC)には十分注意を払って書いております。
現状、複数の受注案件を扱う企業に所属していた期間が多く、また自分自身も幅広い経験を積みたかったため１案件あたりの期間が短めになっております。

#### 【今までの案件で大変だったことはなんでしょうか、また、どのように対応しましたでしょうか？】

過去の古い案件で重複した機能のあるロジックが１つのプロジェクトに散在したことがありました。
Dry 原則に考慮するため、ロジックの共通点を見つけ、不具合が出ないよう確認を行いつつ 1 つに統合するような作業を行いました。

#### 【自身が得意だと思う事】

物事を深く考えて、プロジェクト全体の設計も考慮して、ソースコードの関数やフロントエンドのコンポーネントの設計と開発とそのための提案をチームにできるところだと思います。
業務効率化のために、chrome の拡張機能を開発を提案して開発したり、過去に自身が使用して良かったと思うフレームワークの導入をプルリクエストで検討したりいたしました。、

#### 【今までで褒められた点】

比較的対応の素早さを評価されることが多いかなと思います。

#### 【今までの案件で自主的に行動した例】

基本的に直近の案件では割り振られたタスクのみならずとも、自身が改修したいと思った箇所については GitHub(または GitLab, BitBucket など)のプルリクエストを出してするように心がけております。
(_案件#17_)プロジェクトの設計段階で ER 図を作成して DB のバス停留所やバス路線などのテーブルとリレーションの作成を行いました。
(_案件#15_)cloudFunctions のダッシュボードで API をどう実装するかどうかの提案を行いました、
(_案件#14_)グラフを表示させてほしいとの要望から vue-chart.js を選定して導入いたしました。
(_案件#14_)もともと vue.js の class API で記述されていたものを自身の提案により composition-api に記述し直しました。

#### 【自身が苦手だと思う事、】

リアルタイムのミーティングなどで咄嗟に言葉を出すことは少し苦手としておりますが、報告する内容などをあらかじめメモをしておく事などで改善を図っております。

#### 【どのように新しい言語を学んでいったのか?】

基本的には言語の公式サイトやその他の Web ページを参照しながらの独学になります。

#### 【今後のキャリアステップについて】

開発をメインにしつつ、基本設計、詳細設計や一部の用件定義についても徐々に提案していけるように考えております。
新しい物事に対してどんどん挑戦できるような感じの職場で働きたいといった形はあるかと思います。

#### 【このエンジニアで働きたいなど、この業界で働きたい。といったものはありますでしょうか？】

今まではこれといったものはなかったのですが、DX(デジタルトランスフォーメーション) に関連するものなど世の中の役に立っていると思えるようなものであれば働きたいなと思っております。

### 〈開発について〉

#### 【チームで作業、コミュニケーションを進める際に気を配っている事】

何か既存のソースコードや仕様書の部分で改善したいところがあった場合はタスク管理ツール(Jira や Redmine)に課題としてあげ、他のチームの反応が良い場合に Git のブランチを切り、リポジトリ管理ツール (Github, Bitbuckert、Gitlab などん)にプルリクエストを投げるといったことをしておりました。
Git リポジトリ管理ツールでプルリクエストを送る際はスクリーンショットなど視覚的にわかりやすいものを添付するようにしている。
フロントエンドなどの画面の不具合に関する質問をする場合はスクリーンショットを Slack に添付。
それでも意図がつかみづらい場合には Slack のハドルミーティングや meet などのミーティング機能を使うこともあります。

#### 【Nuxt.js などの ServerSideRendering で実装するときに気をつける事】

指定したソースコードがサーバー側で実行されるのかクライアント上で実行されるのか、あるいは両方なのかと言ったことを考慮しなければならないと思います。例としては LocalStorage を使用する箇所はクライアントでしか使用できないと言った感じです。

#### 【フロントエンドでのパッケージの選定となる基準とは何でしょうか？】

なるべくドキュメントが多く存在する、メンテナンスが直近でも行われているといったものを選択しております。
例として vueUse があるのですが、_案件#17_ でユーザーの状態などを一時保存したいといった時に、ローカルストレージ使用する案を提案いたしました。vue の composition-api の上でローカルストレージを簡潔に記述したいといった時に、比較的メジャーでメンテナンスも行われていて、完結に記述するといった要件を満たしていたことからこちらの vueUse を採用するに至りました。

#### 【今までの案件でのコードレビューの仕方】

github の機能で 自動でユーザーがレビュー担当にアサインされる機能があり、そちらでレビューを分担しておりました。
レビューはソースコードの記述方法が事前に合意したものと沿っているか、動作が仕様書に沿っているか、余分なソースコードがないか、命名は適切かなどの事柄などを良くみていました。

#### 【コードレビューでよく指摘された箇所は？】

そちらの方を書いた方がが短いコードになりますよといった点や、他のコードと記述を揃えた方が良い、といった内容が多いです。

#### 【主なテストの実行手法】

単体テストでは jest、E2E テストでは postman と newman を使用したテストを行いました(_案件#20_ など)。jest は github 上で circleCI を使用してテストをおこない、テストが全てパスした時のみプルリクエストのマージができるような形にしておりました。

#### 【Git の使い方で気を配っていること】

Git での 1 つのコミットはなるべく１つの単位で行うことをなるべく心がけている。
プルリクエストを出す前などに git merge origin/master など作業ブランチに対してマスターブランチのマージを行っています。

#### 【DB の SQL の経験の詳細】

SQL 文につきましては SELECT や INSERT INTO, UPDATE, DELETE といった基本的な DML(Data Manipulation Language) を使用したデータ操作や、CREATE や ALTER などの DDL(Data Definition Language) だったり、COUNT や MAX など集約関数を使用した処理など、一通りの SQL を記述することが可能です。 過去の案件で使用したものは、JOIN を使用した SELECT 文、UNION を使用したテーブルの結合、ストアドプロシージャを使用したパフォーマンスの最適化といったものになります。

#### 【DB の設計の経験の詳細】

設計につきましては #17 の案件にてデータベースの構造を(バス停留所のデータを運行ルートに沿って線で結ぶようなイメージで) ER 図で提案をしたことがございます。
SQL のテーブルに関しては一対多の ID での参照やや多対多のリレーションシップで別テーブルを定義するなどの基本的な設計ならば対応可能だと思います。

#### 【セキュリティに関する実装を行った経験・知見】
クロスサイトスクリプティングなどのインジェクションやCSRFの対策の経験あり。
また、Auth0を使用したシングルサインオンの実装に関わることも一部行いました。

[//]: # "#### 【１週間ほど何画面くらい作れそうなかんじでしょうか】"
[//]: #
[//]: # "画面を意識したことはないですが、ユーザープロフィールの編集などのページを作成してコンポーネント化するのには 3,4 日分かかると思います。"
`,
};
